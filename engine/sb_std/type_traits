#pragma once

#include "std.h"

#include SB_SRC_STD_INC(type_traits)

namespace SB_STD_NS {

    SB_SRC_STD_USE(is_array_v);
    SB_SRC_STD_USE(is_integral);
    SB_SRC_STD_USE(is_integral_v);
    SB_SRC_STD_USE(is_arithmetic);
    SB_SRC_STD_USE(is_signed);
    SB_SRC_STD_USE(is_unsigned_v);
    SB_SRC_STD_USE(is_trivial);
    SB_SRC_STD_USE(is_trivial_v);
    SB_SRC_STD_USE(is_pod);
    SB_SRC_STD_USE(is_pod_v);
    SB_SRC_STD_USE(false_type);
    SB_SRC_STD_USE(true_type);
    SB_SRC_STD_USE(underlying_type);
    SB_SRC_STD_USE(underlying_type_t);
    SB_SRC_STD_USE(is_same);
    SB_SRC_STD_USE(is_same_v);
    SB_SRC_STD_USE(integral_constant);
    SB_SRC_STD_USE(remove_cv_t);
    SB_SRC_STD_USE(remove_reference_t);
    SB_SRC_STD_USE(remove_all_extents);
    SB_SRC_STD_USE(remove_all_extents_t);
    SB_SRC_STD_USE(remove_pointer);
    SB_SRC_STD_USE(enable_if_t);
    SB_SRC_STD_USE(decay_t);
    SB_SRC_STD_USE(declval);
    SB_SRC_STD_USE(aligned_storage);
    SB_SRC_STD_USE(void_t);

namespace SB_STD_NS_EXT {

    template< class T >
    struct remove_cvref 
    {
        typedef sbstd::remove_cv_t<sbstd::remove_reference_t<T>> type;
    };

    template< class T >
    using remove_cvref_t = typename remove_cvref<T>::type;

    struct null_t
    {
    };

    template <typename T>
    struct is_string_raw : public sbstd::false_type
    {
    };

    template <>
    struct is_string_raw<char *> : public sbstd::true_type
    {
    };

    template <>
    struct is_string_raw<char const *> : public sbstd::true_type
    {
    };

    template<typename TType, typename ... TTypes>
    struct are_same
    {
        static constexpr bool value = (std::is_same_v<TType, TTypes> && ...);
    };

    template<typename TType>
    struct are_same<TType>
    {
        static constexpr bool value = true;
    };

    template<typename ... TTypes>
    constexpr bool are_same_v = are_same<TTypes...>::value; 
}
}
